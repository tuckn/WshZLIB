!function(){var util,CD,path,os,fs,fse,child_process,objAdd,obtain,isEmpty,isTrueLike,isSolidArray,isSolidString,isPureNumber,isSameStr,startsWith,insp,parseDate,srrd,exec,execFileSync,zlib,MODULE_TITLE,DEF_7Z_EXE,DEF_7ZFM_EXE,DEF_DIR_WINRAR,throwErrInvalidValue,throwErrNonStr,_log;Wsh&&Wsh.ZLIB||(Wsh.ZLIB={},util=Wsh.Util,CD=Wsh.Constants,path=Wsh.Path,os=Wsh.OS,fs=Wsh.FileSystem,fse=Wsh.FileSystemExtra,child_process=Wsh.ChildProcess,objAdd=Object.assign,obtain=util.obtainPropVal,isEmpty=util.isEmpty,isTrueLike=util.isTrueLike,isSolidArray=util.isSolidArray,isSolidString=util.isSolidString,isPureNumber=util.isPureNumber,isSameStr=util.isSameMeaning,startsWith=util.startsWith,insp=util.inspect,parseDate=util.createDateString,srrd=os.surroundCmdArg,exec=child_process.exec,execFileSync=child_process.execFileSync,zlib=Wsh.ZLIB,MODULE_TITLE="WshZLIB/ZLIB.js",DEF_7Z_EXE=path.join("C:\\Program Files\\7-Zip","7z.exe"),DEF_7ZFM_EXE=path.join("C:\\Program Files\\7-Zip","7zFM.exe"),DEF_DIR_WINRAR="C:\\Program Files\\WinRAR",throwErrInvalidValue=function(functionName,argName,typeErrVal){util.throwValueError(argName,MODULE_TITLE,functionName,typeErrVal)},throwErrNonStr=function(functionName,typeErrVal){util.throwTypeError("string",MODULE_TITLE,functionName,typeErrVal)},_log=function(sw,text){sw&&console.log(text)},zlib._createTmpListFile=function(paths,options){isSolidArray(paths)||isSolidString(paths)||throwErrInvalidValue("zlib._createTmpListFile","paths",paths);var encoding=obtain(options,"encoding","utf8"),eol=obtain(options,"eol","\n"),options=isSolidArray(paths)?paths.reduce(function(acc,p){return acc+p+eol},""):paths+eol;return fs.writeTmpFileSync(options,{encoding:encoding})},zlib._makeDestArchivePath=function(ext,paths,dest){isSolidArray(paths)||isSolidString(paths)||throwErrInvalidValue("zlib._makeDestArchivePath","paths",paths);paths=isSolidArray(paths)?paths[0]:paths;return isEmpty(dest)?dest=fs.existsSync(paths)&&fs.statSync(paths).isDirectory()?paths+ext:/\\\*$/.test(paths)?path.dirname(paths).replace(/\\\*$/,"")+ext:paths.replace(/\*/g,"xxx")+ext:fs.existsSync(dest)&&fs.statSync(dest).isDirectory()&&(dest=fs.existsSync(paths)&&fs.statSync(paths).isDirectory()?path.join(dest,path.basename(paths)+ext):path.join(dest,path.basename(paths).replace(/\*/g,"xxx")+ext)),dest},zlib.deflateSync=function(paths,dest,options){var FN="zlib.deflateSync",outputsLog=(isSolidArray(paths)||isSolidString(paths)||throwErrInvalidValue(FN,"paths",paths),obtain(options,"outputsLog",!1)),isDryRun=obtain(options,"isDryRun",!1),args=[],workingDir=(_log(outputsLog,"u : Update files to archive"),_log(outputsLog,"-tzip: Set ZIP type of archive"),_log(outputsLog,"-ssw: Compress shared(locked) files"),args.push("u","-tzip","-ssw"),obtain(options,"workingDir",null)),workingDir=(isSolidString(workingDir)&&(_log(outputsLog,'-w"'+workingDir+'": Assign the working directory'),args.push('-w"'+workingDir+'"')),obtain(options,"updateMode","SYNC"));fs.existsSync(destZip)&&isSameStr(workingDir,"SYNC")&&args.push("-up0q0r2x1y1z1w2");var excludeListFile,workingDir="",excludingFiles=(obtain(options,"includesSubDir",!1)?(_log(outputsLog,"-r: Include subdirectories (When specified wildcard or filename)"),args.push("-r"),workingDir="r"):(_log(outputsLog,"-r-: Not include subdirectories (When specified wildcard or filename)"),args.push("-r-")),obtain(options,"excludingFiles",null)),workingDir=(isEmpty(excludingFiles)||(excludeListFile=zlib._createTmpListFile(excludingFiles),args.push("-x"+workingDir+'@"'+excludeListFile+'"'),_log(outputsLog,"-x: Set excluding filepaths "+insp(excludingFiles)),_log(outputsLog,"Excluding list file: "+excludeListFile)),obtain(options,"compressLv",null)),excludingFiles=((isPureNumber(workingDir)||isSolidString(workingDir))&&(excludingFiles=workingDir.toString().toUpperCase().trim(),_log(outputsLog,(workingDir="FASTEST"===excludingFiles||"1"===excludingFiles?"-mx1":"FAST"===excludingFiles||"3"===excludingFiles?"-mx3":"MAXIMUM"===excludingFiles||"7"===excludingFiles?"-mx7":"ULTRA"===excludingFiles||"9"===excludingFiles?"-mx9":"-mx"+excludingFiles)+": Set compression level (-mx1(fastest) ... -mx9(ultra)"),args.push(workingDir)),obtain(options,"password",null)),destZip=(isSolidString(excludingFiles)&&(_log(outputsLog,'-p"****": Set the password (-mem=AES256)'),args.push('-p"'+excludingFiles+'"',"-mem=AES256")),zlib._makeDestArchivePath(".zip",paths,dest)),workingDir=obtain(options,"dateCode",null),excludingFiles=(isSolidString(workingDir)&&(destZip=destZip.replace(/(\.zip)?$/i,"_"+parseDate(workingDir)+"$1")),path.dirname(destZip)),dest=(fs.existsSync(excludingFiles)||isDryRun||fse.ensureDirSync(excludingFiles),args.push(destZip),zlib._createTmpListFile(paths)),workingDir=(args.push('@"'+dest+'"'),_log(outputsLog,"Set compressed filepaths "+insp(paths)),_log(outputsLog,"Compressed list file: "+excludeListFile),obtain(options,"exe7z",DEF_7Z_EXE)),excludingFiles=objAdd({isDryRun:isDryRun},options),paths=(_log(outputsLog,"exe path: "+workingDir),_log(outputsLog,"arguments: "+insp(args)),_log(outputsLog,"options: "+insp(excludingFiles)),execFileSync(workingDir,args,excludingFiles));if(paths.archivedPath=destZip,obtain(options,"savesTmpList",!1)||(excludeListFile&&fse.removeSync(excludeListFile),fse.removeSync(dest)),_log(outputsLog,insp(paths)),isDryRun)return paths;if(0===paths.exitCode)return _log(outputsLog,"No error"),paths.error=!1,paths;if(1===paths.exitCode)return _log(outputsLog,"Warning. Non fatal error(s)."),paths.error=!1,paths;if(2===paths.exitCode)throw new Error("[ERROR] 7-Zip: Fatal Error\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(7===paths.exitCode)throw new Error("[ERROR] 7-Zip: Command line error\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(8===paths.exitCode)throw new Error("[ERROR] 7-Zip: Not enough memory for operation\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(255===paths.exitCode)throw new Error("[ERROR] 7-Zip: User stopped the process\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");throw new Error("[UNKNOWN EXIT CODE] The compressing process probably failed\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")")},zlib.openZip=function(archive,options){isSolidString(archive)||throwErrNonStr("zlib.openZip",archive);var archive=path.resolve(archive),exe7zFM=obtain(options,"exe7zFM",DEF_7ZFM_EXE),winStyle=obtain(options,"winStyle",CD.windowStyles.activeDef),winStyle=objAdd({shell:!1,winStyle:winStyle},options),options=srrd(exe7zFM)+" "+srrd(archive);exec(options,winStyle)},zlib.unzipSync=function(archive,destDir,options){var FN="zlib.unzipSync",outputsLog=(isSolidString(archive)||throwErrNonStr(FN,archive),obtain(options,"outputsLog",!1)),isDryRun=obtain(options,"isDryRun",!1),args=[],password=(_log(outputsLog,"x: eXtract files with full paths"),args.push("x"),obtain(options,"password",null)),password=(isEmpty(password)||(_log(outputsLog,'-p"****": Set the password (-mem=AES256)'),args.push('-p"'+password+'"',"-mem=AES256")),obtain(options,"workingDir",null)),password=(isEmpty(password)||(_log(outputsLog,'-w"'+password+'": Assign the working directory'),args.push('-w"'+password+'"')),path.resolve(archive)),archive=(args.push(password),isEmpty(destDir)&&(destDir=path.dirname(password)),destDir=path.resolve(destDir),!fs.existsSync(destDir)&&obtain(options,"makesDestDir",!1)&&(_log(outputsLog,"Creating the dest directory"),isDryRun||fse.ensureDirSync(destDir)),obtain(options,"makesArchiveNameDir",!1)&&(destDir=path.join(destDir,path.parse(password).name),_log(outputsLog,"Creating the Zip name directory"),isDryRun||fse.ensureDirSync(destDir)),_log(outputsLog,'-o: Set output directory. "'+destDir+'"'),args.push('-o"'+destDir+'"',"-y"),obtain(options,"exe7z",DEF_7Z_EXE)),password=objAdd({isDryRun:isDryRun},options),destDir=(_log(outputsLog,"exe path: "+archive),_log(outputsLog,"arguments: "+insp(args)),_log(outputsLog,"options: "+insp(password)),execFileSync(archive,args,password));if(_log(outputsLog,insp(destDir)),isDryRun)return destDir;if(0===destDir.exitCode)return _log(outputsLog,"No error"),destDir.error=!1,destDir;if(1===destDir.exitCode)return _log(outputsLog,"Warning. Non fatal error(s)."),destDir.error=!1,destDir;if(2===destDir.exitCode)throw new Error("[ERROR] 7-Zip: Fatal Error\n "+insp(destDir)+"  at "+FN+" ("+MODULE_TITLE+")");if(3===destDir.exitCode)throw new Error("[ERROR] 7-Zip: Command line error\n "+insp(destDir)+"  at "+FN+" ("+MODULE_TITLE+")");if(5===destDir.exitCode)throw new Error("[ERROR] 7-Zip: Not enough memory for operation\n "+insp(destDir)+"  at "+FN+" ("+MODULE_TITLE+")");if(255===destDir.exitCode)throw new Error("[ERROR] 7-Zip: User stopped the process\n "+insp(destDir)+"  at "+FN+" ("+MODULE_TITLE+")");throw new Error("[UNKNOWN EXIT CODE] The unzip process probably failed\n "+insp(destDir)+"  at "+FN+" ("+MODULE_TITLE+")")},zlib.deflateSyncIntoRar=function(paths,dest,options){var FN="zlib.deflateSyncIntoRar",outputsLog=(isSolidArray(paths)||isSolidString(paths)||throwErrInvalidValue(FN,"paths",paths),obtain(options,"outputsLog",!1)),isDryRun=obtain(options,"isDryRun",!1),args=[],workingDir=(_log(outputsLog,"a: Add files to archive"),args.push("a"),obtain(options,"workingDir",null)),workingDir=(isSolidString(workingDir)&&(_log(outputsLog,'-w: Assign work directory to "'+options.workingDir+'"'),args.push('-w"'+options.workingDir+'"')),obtain(options,"updateMode","ADD"));isSameStr(workingDir,"MIRROR")||(_log(outputsLog,"-u: Update a existing RAR file"),args.push("-u"),isSameStr(workingDir,"SYNC")&&(_log(outputsLog,"-as: Synchronize archive contents"),args.push("-as")),isTrueLike(obtain(options,"skipsExisting",!1))?(_log(outputsLog,"-o-: Set the none of overwriting. (Skip existing)"),args.push("-o-")):(_log(outputsLog,"-o+: Set the overwriting (If existing updated, overwrite)"),args.push("-o+")));obtain(options,"excludesSubDirWildcard",!1)?_log(outputsLog,"Exclude subdirectories (for wildcard names only)"):(_log(outputsLog,"-r0: Recurse subdirectories (for wildcard names only)"),args.push("-r0"));var exNames,exNamesFormatted,workingDir=obtain(options,"excludingFiles",null);(isSolidArray(workingDir)||isSolidString(workingDir))&&(isSolidArray(workingDir)?exNames=workingDir:isSolidString(workingDir)&&(exNames=[workingDir]),exNamesFormatted=[],exNames.forEach(function(name){path.isAbsolute(name)||startsWith(name,"*")?exNamesFormatted.push(name):exNamesFormatted.push(path.join("*",name))}),exNames=zlib._createTmpListFile(exNamesFormatted),args.push('-x@"'+exNames+'"'),_log(outputsLog,"-x@: Set excluding filepaths "+insp(exNamesFormatted)),_log(outputsLog,"Excluding list file: "+exNames)),obtain(options,"excludesUsingFiles",!1)?_log(outputsLog,"Exclude shared files"):(_log(outputsLog,"-dh: Open shared files"),args.push("-dh")),obtain(options,"excludesEmptyDir",!1)?(_log(outputsLog,"-ed: Does not add empty directories"),args.push("-ed")):_log(outputsLog,"Add empty directories");obtain(options,"expandsPathsToFull",!1)?(_log(outputsLog,"-ep2: Expand paths to full"),args.push("-ep2")):(_log(outputsLog,"-ep1: Exclude base directory from names"),args.push("-ep1"));workingDir=parseInt(obtain(options,"compressLv",3),10),workingDir<0||5<workingDir?(_log(outputsLog,"-m5: Set compression level to 5-maximal"),args.push("-m5")):(_log(outputsLog,"-m"+workingDir+": Set compression level (0-store..3..5-max)"),args.push("-m"+workingDir)),workingDir=obtain(options,"password",null),isSolidString(workingDir)&&(_log(outputsLog,'-hp"****": Encrypt both file data and headers'),args.push('-hp"'+workingDir+'"')),workingDir=parseInt(obtain(options,"rarVersion",5),10),null!=workingDir&&workingDir<4||(4===workingDir?(_log(outputsLog,"-ma4: Specify RAR4.x of archiving format"),args.push("-ma4")):(_log(outputsLog,"-ma5: Specify RAR5.0(default) of archiving format"),args.push("-ma5"),isTrueLike(obtain(options,"isSymlinkAsLink",!1))&&(_log(outputsLog,"-ol: Process symbolic links as the link(only for RAR5.0"),args.push("-ol")))),workingDir=parseInt(obtain(options,"recoveryPer",0),10),0!==workingDir&&(0<workingDir&&workingDir<=100?(_log(outputsLog,"-ri: Add data recovery record -> "+workingDir+"p"),args.push("-rr"+workingDir+"p")):(_log(outputsLog,"-ri: Add data recovery record -> 3p"),args.push("-rr3p"))),workingDir=parseInt(obtain(options,"cpuPriority",0),10);0!==workingDir&&(workingDir<0||15<workingDir?workingDir=0:args.push("-ri"+workingDir)),_log(outputsLog,"-ri"+workingDir+": Set priority (0-default,1-min..15-max)"),obtain(options,"excludesADS",!1)?_log(outputsLog,"Does not save NTFS streams. (ADS: Alternate Data Stream"):(_log(outputsLog,"-os: Save NTFS streams. (ADS: Alternate Data Stream"),args.push("-os")),obtain(options,"containsSecArea",!1)&&(_log(outputsLog,"-ow: Save or restore file owner and group"),args.push("-ow")),obtain(options,"isSolidArchive",!0)?(_log(outputsLog,"-s: Create solid archive"),args.push("-s")):(_log(outputsLog,"-s-: Create none of solid archive"),args.push("-s-")),obtain(options,"assumesYes",!0)&&(_log(outputsLog,"-y: Assume Yes on all queries"),args.push("-y"));obtain(options,"sendAllMesToStdErr",!1)&&(_log(outputsLog,"-ierr: Send all messages to stderr"),args.push("-ierr"));var workingDir=zlib._makeDestArchivePath(".rar",paths,dest),dest=obtain(options,"dateCode",null),dest=(isSolidString(dest)&&(workingDir=workingDir.replace(/(\.rar)?$/i,"_"+parseDate(dest)+"$1")),path.dirname(workingDir)),dest=(fs.existsSync(dest)||isDryRun||fse.ensureDirSync(dest),args.push(workingDir),zlib._createTmpListFile(paths)),paths=(args.push('@"'+dest+'"'),_log(outputsLog,"Set compressed filepaths "+insp(paths)),_log(outputsLog,"Compressed list file: "+exNames),obtain(options,"dirWinRar",DEF_DIR_WINRAR)),paths=obtain(options,"isGUI",!1)?path.join(paths,"WinRar.exe"):path.join(paths,"Rar.exe"),op=objAdd({isDryRun:isDryRun},options),paths=(_log(outputsLog,"exe path: "+paths),_log(outputsLog,"arguments: "+insp(args)),_log(outputsLog,"options: "+insp(op)),execFileSync(paths,args,op));if(paths.archivedPath=workingDir,obtain(options,"savesTmpList",!1)||(exNames&&fse.removeSync(exNames),fse.removeSync(dest)),_log(outputsLog,insp(paths)),isDryRun)return paths;if(paths.error)throw new Error("Failed to deflate the files\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(0===paths.exitCode)return _log(outputsLog,"[SUCCESS] success."),paths.error=!1,paths;if(1===paths.exitCode)return _log(outputsLog,"[WARNING] Non fatal error(s) occurred."),paths.error=!1,paths;if(2===paths.exitCode)throw new Error("[FATAL ERROR] A fatal error occurred.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(3===paths.exitCode)throw new Error("[CRC ERROR] A CRC error occurred when unpacking.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(4===paths.exitCode)throw new Error("[LOCKED ARCHIVE] Attempt to modify an archive previously locked by the ‘k’ command.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(5===paths.exitCode)throw new Error("[WRITE ERROR] Write to disk error.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(6===paths.exitCode)throw new Error("[OPEN ERROR] Open file error.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(7===paths.exitCode)throw new Error("[USER ERROR] Command line option error.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(8===paths.exitCode)throw new Error("[MEMORY ERROR] Not enough memory for operation.\n "+insp(paths)+"  at "+FN+" ("+MODULE_TITLE+")");if(9===paths.exitCode)throw new Error("[CREATE ERROR] Create file error.\n "+paths.stderr+"  at "+FN+" ("+MODULE_TITLE+")");if(10===paths.exitCode)throw new Error("[SAME ARCHIVE] No updating file. The existing RAR file is not changed "+paths.stderr+"  at "+FN+" ("+MODULE_TITLE+")");if(255===paths.exitCode)throw new Error("[USER BREAK] User stopped the process.\n "+paths.stderr+"  at "+FN+" ("+MODULE_TITLE+")");throw new Error("[UNKNOWN EXIT CODE] The compressing process probably failed\n "+paths.stderr+"  at "+FN+" ("+MODULE_TITLE+")")},zlib.testRarSync=function(archive,options){var FN="zlib.testRarSync",outputsLog=(isSolidString(archive)||throwErrNonStr(FN,archive),obtain(options,"outputsLog",!1)),isDryRun=obtain(options,"isDryRun",!1),archive=["t",path.resolve(archive)],dirWinRar=obtain(options,"dirWinRar",DEF_DIR_WINRAR),dirWinRar=obtain(options,"isGUI",!1)?path.join(dirWinRar,"WinRar.exe"):path.join(dirWinRar,"Rar.exe"),options=objAdd({isDryRun:isDryRun},options),dirWinRar=(_log(outputsLog,"exe path: "+dirWinRar),_log(outputsLog,"arguments: "+insp(archive)),_log(outputsLog,"options: "+insp(options)),execFileSync(dirWinRar,archive,options));if(_log(outputsLog,insp(dirWinRar)),isDryRun)return dirWinRar;if(dirWinRar.error)throw new Error("Failed to test the files\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(0===dirWinRar.exitCode)return _log(outputsLog,"Successful operation."),dirWinRar.error=!1,dirWinRar;if(1===dirWinRar.exitCode)return _log(outputsLog,"Non fatal error(s) occurred."),dirWinRar.error=!1,dirWinRar;if(2===dirWinRar.exitCode)throw new Error("A fatal error occurred. "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(3===dirWinRar.exitCode)throw new Error("Invalid checksum. Data is damaged. "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(4===dirWinRar.exitCode)throw new Error(" "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(5===dirWinRar.exitCode)throw new Error("[WRITE ERROR] Write to disk error.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(6===dirWinRar.exitCode)throw new Error("[OPEN ERROR] Open file error.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(7===dirWinRar.exitCode)throw new Error("[USER ERROR] Command line option error.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(8===dirWinRar.exitCode)throw new Error("[MEMORY ERROR] Not enough memory for operation.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(9===dirWinRar.exitCode)throw new Error("[CREATE ERROR] Create file error.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(10===dirWinRar.exitCode)throw new Error("No files matching the specified mask and options were found.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(11===dirWinRar.exitCode)throw new Error("Wrong password. "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");if(255===dirWinRar.exitCode)throw new Error("[USER BREAK] User stopped the process.\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")");throw new Error("[UNKNOWN EXIT CODE] The testing process probably failed\n "+insp(dirWinRar)+"  at "+FN+" ("+MODULE_TITLE+")")},zlib.openRar=function(archive,options){isSolidString(archive)||throwErrNonStr("zlib.openRar",archive);var archive=path.resolve(archive),dirWinRar=obtain(options,"dirWinRar",DEF_DIR_WINRAR),dirWinRar=path.join(dirWinRar,"WinRar.exe"),winStyle=obtain(options,"winStyle",CD.windowStyles.activeDef),winStyle=objAdd({shell:!1,winStyle:winStyle},options),options=srrd(dirWinRar)+" "+srrd(archive);exec(options,winStyle)},zlib.unrarSync=function(archive,destDir,options){var FN="zlib.unrarSync",outputsLog=(isSolidString(archive)||throwErrNonStr(FN,archive),obtain(options,"outputsLog",!1)),isDryRun=obtain(options,"isDryRun",!1),args=(_log(outputsLog,"x: eXtract files with full paths"),["x"]),password=obtain(options,"password",null),password=(isEmpty(password)||(_log(outputsLog,'-p"****": Set the password'),args.push('-p"'+password+'"')),obtain(options,"workingDir",null)),password=(isSolidString(password)&&(_log(outputsLog,'-w: Assign work directory to "'+options.workingDir+'"'),args.push('-w"'+options.workingDir+'"')),path.resolve(archive)),archive=(isEmpty(destDir)&&(destDir=path.dirname(password)),destDir=path.resolve(destDir),!fs.existsSync(destDir)&&obtain(options,"makesDestDir",!1)&&(_log(outputsLog,"Creating the dest directory"),isDryRun||fse.ensureDirSync(destDir)),obtain(options,"makesArchiveNameDir",!1)&&(destDir=path.join(destDir,path.parse(password).name),_log(outputsLog,"Creating the Zip name directory"),isDryRun||fse.ensureDirSync(destDir)),_log(outputsLog,'Set output directory. "'+destDir+'"'),args.push("-y","-ri0",password,destDir),obtain(options,"dirWinRar",DEF_DIR_WINRAR)),password=obtain(options,"isGUI",!1)?path.join(archive,"WinRar.exe"):path.join(archive,"Rar.exe"),archive=objAdd({isDryRun:isDryRun},options),options=(_log(outputsLog,"exe path: "+password),_log(outputsLog,"arguments: "+insp(args)),_log(outputsLog,"options: "+insp(archive)),execFileSync(password,args,archive));if(options.destinationDir=destDir,isDryRun)return options;if(_log(outputsLog,insp(options)),isDryRun)return options;if(options.error)throw new Error("Failed to unRar the files\n "+options.stderr+"  at "+FN+" ("+MODULE_TITLE+")");if(0===options.exitCode)return _log(outputsLog,"[SUCCESS] Successful operation."),options.error=!1,options;if(1===options.exitCode)return _log(outputsLog,"Non fatal error(s) occurred."),options.error=!1,options;if(2===options.exitCode)throw new Error("[FATAL ERROR] A fatal error occurred.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(3===options.exitCode)throw new Error("Invalid checksum. Data is damaged. "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(4===options.exitCode)throw new Error(" "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(5===options.exitCode)throw new Error("[WRITE ERROR] Write to disk error.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(6===options.exitCode)throw new Error("[OPEN ERROR] Open file error.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(7===options.exitCode)throw new Error("[USER ERROR] Wrong command line option.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(8===options.exitCode)throw new Error("[MEMORY ERROR] Not enough memory for operation.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(9===options.exitCode)throw new Error("[CREATE ERROR] Create file error.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(10===options.exitCode)throw new Error("No files matching the specified mask and options were found.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(11===options.exitCode)throw new Error("Wrong password. "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");if(255===options.exitCode)throw new Error("[USER BREAK] User stopped the process.\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")");throw new Error("[UNKNOWN EXIT CODE] The unRar process probably failed\n "+insp(options)+"  at "+FN+" ("+MODULE_TITLE+")")})}();
